package {{ .Model.PackageName }}
{{ $metadata := .Metadata }}
{{ $currentPkg := .Model.Package }}
 {{/* the values cannot be empty strings but have to be at least single blank strings; if empty strings their use generate an error! */}}
{{ $ptrAddressOf := " " }}
{{ $ptrDerefOf := " " }}
{{- if .Metadata.usePtrs }}
{{ $ptrAddressOf = "&" }}
{{ $ptrDerefOf = "*" }}
{{- end }}

import (
	"fmt"
	"go.mongodb.org/mongo-driver/v2/bson"
	"time"
{{range $pkg := .Model.PackageImports  }}
{{- if ne $pkg "go.mongodb.org/mongo-driver/v2/bson" }}
    "{{$pkg}}"
{{- end}}
{{- end}}
)

// @tpm-schematics:start-region("top-file-section")
// @tpm-schematics:end-region("top-file-section")

func UpdateMethodsGoInfo() string {
	i := fmt.Sprintf("tpm_morphia query filter support generated for %s package on %s", "author", time.Now().String())
	return i
}

type UnsetMode int64

const (
	UnSpecified     UnsetMode = 0
	KeepCurrent               = 1
	UnsetData                 = 2
	SetData2Default           = 3
)

type UnsetOption func(uopt *UnsetOptions)

type UnsetOptions struct {
	DefaultMode UnsetMode
	{{- range $a := .Model.Attributes}}
	{{$a.GoName}} UnsetMode
	{{- end}}
}

func (uo *UnsetOptions) ResolveUnsetMode(um UnsetMode) UnsetMode {
	if um == UnSpecified {
		um = uo.DefaultMode
	}

	return um
}

func WithDefaultUnsetMode(m UnsetMode) UnsetOption {
	return func(uopt *UnsetOptions) {
		uopt.DefaultMode = m
	}
}

{{- range $a := .Model.Attributes}}
func With{{$a.GoName}}UnsetMode(m UnsetMode) UnsetOption {
  	return func(uopt *UnsetOptions) {
  		uopt.{{$a.GoName}} = m
  	}
  }
{{- end}}

type UpdateOption func(ud *UpdateDocument)
type UpdateOptions []UpdateOption

// GetUpdateDocumentFromOptions convenience method to create an update document from single updates instead of a whole object
func GetUpdateDocumentFromOptions(opts ...UpdateOption) UpdateDocument {
	ud := UpdateDocument{}
	for _, o := range opts {
		o(&ud)
	}

	return ud
}

// GetUpdateDocument
// Convenience method to create an Update Document from the values of the top fields of the object. The convenience is in the handling
// the unset because if I pass an empty struct to the update it generates an empty object anyway in the db. Handling the unset eliminates
// the issue and delete an existing value without creating an empty struct.
func GetUpdateDocument(obj *{{ classify .Model.Name}}, opts ...UnsetOption) UpdateDocument {

	uo := &UnsetOptions{ DefaultMode: KeepCurrent }
	for _, o := range opts {
		o(uo)
	}

  ud := UpdateDocument{}

{{- range $a := .Model.Attributes}}
{{- $f := $a.Definition }}
{{- range $i, $p := $a.Paths  }}
{{- if $a.HasOption "cust-upd-handling" }}
/* Custom Update Handling Option: cust-upd-handling
{{- end}}
{{- if $f.IsCollectionType }}
	ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if $f.IsStructType }}
    ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} {{- $ptrAddressOf -}}obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if $f.IsValueType }}
{{- if eq $f.Typ "string" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "int" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "long" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "bool" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "date" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "timestamp" }}
   ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- if eq $f.Typ "document" }}
    ud.setOrUnset{{ updateMethodSignature $p.Path }}({{ updateMethodVarParams $p.Path true "after" }} obj.{{$a.GoName}}, uo.ResolveUnsetMode(uo.{{$a.GoName}}))
{{- end }}
{{- end }}
{{- if $a.HasOption "cust-upd-handling" }}
 */
{{- end}}
{{- end }}
{{- end }}

   return ud
}

{{- range $a := .Model.Attributes}}
{{ $f := $a.Definition }}
{{- if eq $f.Typ "string" }}
{{ template "update-string" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "int" }}
{{ template "update-int" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "long" }}
{{ template "update-long" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "bool" }}
{{ template "update-bool" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "date" }}
{{ template "update-date" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "timestamp" }}
{{ template "update-timestamp" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "document" }}
{{ template "update-document" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "object-id" }}
{{ template "update-object-id" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "struct" }}
{{ template "update-struct" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "array" }}
{{ template "update-array" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- else if eq $a.Definition.Typ "map" }}
{{ template "update-array" filterSubTemplateContext $a $currentPkg  $metadata}}
{{- end }}
{{- end }}

// @tpm-schematics:start-region("bottom-file-section")
// @tpm-schematics:end-region("bottom-file-section")

