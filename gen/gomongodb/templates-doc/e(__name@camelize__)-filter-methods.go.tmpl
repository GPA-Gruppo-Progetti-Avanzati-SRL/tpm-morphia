package {{ .Model.PackageName }}
{{ $metadata := .Metadata }}
import (
	"fmt"
	"go.mongodb.org/mongo-driver/v2/bson"
	"time"
{{range $pkg := .Model.PackageImports }}
{{- if ne $pkg "go.mongodb.org/mongo-driver/bson" }}
    "{{$pkg}}"
{{- end}}
{{- end}}
)

// @tpm-schematics:start-region("top-file-section")
// @tpm-schematics:end-region("top-file-section")

func FilterMethodsGoInfo() string {
	i := fmt.Sprintf("tpm_morphia query filter support generated for %s package on %s", "author", time.Now().String())
	return i
}

// to be able to succesfully call this method you have to define a text index on the collection. The $text operator has some additional fields that are not supported yet.
func (ca *Criteria) AndTextSearch(ssearch string) *Criteria {
	if ssearch == "" {
		return ca
	}

	c := func() bson.E {
		const TextOperator = "$text"
		return bson.E{Key: TextOperator, Value: bson.E{Key: "$search", Value: ssearch}}
	}
	*ca = append(*ca, c)
	return ca
}

{{- range $a := .Model.AttributesTree}}
{{- if $a.Definition.HasOption "with-filter" }}
{{- if eq $a.Definition.Typ "string" }}
{{ template "filter-string" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "int" }}
{{ template "filter-int" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "date" }}
{{ template "filter-date" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "timestamp" }}
{{ template "filter-timestamp" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "object-id" }}
{{ template "filter-object-id" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "long" }}
{{ template "filter-long" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- if eq $a.Definition.Typ "bool" }}
{{ template "filter-bool" filterSubTemplateContext $a "*" $metadata }}
{{- end -}}
{{- end -}}
{{- end }}

// @tpm-schematics:start-region("bottom-file-section")
// @tpm-schematics:end-region("bottom-file-section")