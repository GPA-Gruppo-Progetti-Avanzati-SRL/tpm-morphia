{{ define "filter-int" }}
/*
 * filter-int template: {{.Attr.Definition.Name}}
 */
{{- $a := .Attr }}
{{ $f := $a.Definition }}
{{- range $i, $p := $a.Paths}}
{{- if not (isIdentifierIndexed $p.Path) }}
// And{{ criteriaMethodSignature $p.Path }}EqTo No Remarks
func (ca *Criteria) And{{ criteriaMethodSignature $p.Path }}EqTo ({{ criteriaMethodVarParams $p.Path true "after" }} p int, nullValue ...int) *Criteria {

	if len(nullValue) > 0 && p == nullValue[0] {
	    return ca
    }

	mName := fmt.Sprintf({{ formatIdentifier $p.Path "_" "classify" "suppress" "indexIjk"}}FieldName {{ criteriaMethodVarParams $p.Path false "before" }})
	c := func() bson.E { return bson.E { Key: mName, Value: p } }
	*ca = append(*ca, c)
    return ca
}

func (ca *Criteria) And{{ criteriaMethodSignature $p.Path }}Gt ({{ criteriaMethodVarParams $p.Path true "after" }} p int, nullValue ...int) *Criteria {

	if len(nullValue) > 0 && p == nullValue[0] {
        return ca
    }

	mName := fmt.Sprintf({{ formatIdentifier $p.Path "_" "classify" "suppress" "indexIjk"}}FieldName {{ criteriaMethodVarParams $p.Path false "before" }})
	c := func() bson.E { return bson.E { Key: mName, Value: bson.D { {"$gt", p }} } }
	*ca = append(*ca, c)
    return ca
}

// @tpm-schematics:start-region("{{ formatIdentifier $p.Path "_" "dasherize" "suppress" "indexIjk"}}-field-filter-section")
// @tpm-schematics:end-region("{{ formatIdentifier $p.Path "_" "dasherize" "suppress" "indexIjk"}}-field-filter-section")

{{ end }}
{{- end }}
{{- end }}