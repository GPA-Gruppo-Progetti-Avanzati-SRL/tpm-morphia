package {{ .Collection.GetPackageName }}

import (
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"time"
{{range $pkg := .Collection.GetPackageImports true}}
    "{{$pkg}}"
{{- end}}
)

func {{.Collection.GetPrefix "capital"}}UpdateMethodsGoInfo() string {
	i := fmt.Sprintf("tpm_morphia query filter support generated for %s package on %s", "author", time.Now().String())
	return i
}

{{- range $a := .Collection.Attributes}}
{{ $f := $a.GetDefinition }}
// {{$f}} {{$f.Paths}}
{{- range $i, $p := $a.GetPaths "preferIndexed" }}
func (upds *Updates) Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} p {{$a.GetGoAttributeType}}) *Updates {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	upds.Add(func() bson.E {
    		return bson.E{ Key: mName, Value: p}
    })
	return upds
}
{{- end }}
{{- if or (eq $a.GetDefinition.Typ "array") (eq $a.GetDefinition.Typ "map") -}}
{{ $f := $a.Item.GetDefinition }}
// {{$f}} {{$f.Paths}}
{{- range $i, $p := $a.Item.GetPaths "preferIndexed"}}
func (upds *Updates) Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} p {{$a.Item.GetGoAttributeType}}) *Updates {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	upds.Add(func() bson.E {
    		return bson.E{ Key: mName, Value: p}
    })
	return upds
}
{{- end }}
{{- end }}
{{- end }}

/*
func (upds *Updates) SetAddress(a Address) *Updates {

	upds.Add(func() bson.E {
		return bson.E{ Key: ADDRESS, Value: a}
	})

    return upds
}

func (upds *Updates) SetShippingAddress(a Address) *Updates {

	upds.Add(func() bson.E {
		return bson.E{ Key: SHIPADDRESS, Value: a}
	})

	return upds
}

func (ca *Updates) SetBusinessRelsS(keyS string, p BusinessRel) *Updates {
	mName := fmt.Sprintf(BUSINESSRELS_S, keyS)
	c := func() bson.E { return bson.E{Key: mName, Value: p} }
	ca.Add(c)
	return ca
}

func (ca *Updates) SetBusinessRelsSContractsT(keyS string, keyT string, p Contract) *Updates {
	mName := fmt.Sprintf(BUSINESSRELS_S_CONTRACTS_T, keyS, keyT)
	c := func() bson.E { return bson.E{Key: mName, Value: p} }
	ca.Add(c)
	return ca
}
*/