{{ define "filter-string" }}
//----- {{.Attr.GetDefinition.Name}} of type {{.Attr.GetDefinition.Typ}}
//----- {{.Attr.GetDefinition}} {{.Attr.GetDefinition.Paths}}
{{ $a := .Attr }}
{{ $f := $a.GetDefinition }}
{{- range $i, $p := $f.Paths}}
{{- if not (isIdentifierIndexed $p) }}
// And{{ criteriaMethodSignature $p }}EqTo No Remarks
func (ca *Criteria) And{{ criteriaMethodSignature $p }}EqTo ({{ criteriaMethodVarParams $p true "after" }} p string) *Criteria {

    if p == "" {
        return ca
    }

	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "suppress" "indexIjk"}} {{ criteriaMethodVarParams $p false "before" }})
	c := func() bson.E { return bson.E { Key: mName, Value: p } }
	*ca = append(*ca, c)
    return ca
}

func (ca *Criteria) And{{ criteriaMethodSignature $p }}In ({{ criteriaMethodVarParams $p true "after" }} p []string) *Criteria {

    if len(p) == 0 {
        return ca
    }

	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "suppress" "indexIjk"}} {{ criteriaMethodVarParams $p false "before" }})
	c := func() bson.E { return bson.E { Key: mName, Value: bson.D { {"$in", p} } } }
	*ca = append(*ca, c)
    return ca
}
{{- end }}
{{- end }}

{{ end }}

