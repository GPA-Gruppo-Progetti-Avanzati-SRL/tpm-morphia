package {{ .Collection.GetPackageName }}

import (
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"time"
{{range $pkg := .Collection.GetPackageImports false}}
    "{{$pkg}}"
{{- end}}
)

func {{.Collection.GetPrefix "capital"}}UpdateMethodsGoInfo() string {
	i := fmt.Sprintf("tpm_morphia query filter support generated for %s package on %s", "author", time.Now().String())
	return i
}

/*
 * Convenience method to create an Update Document from the values of the top fields of the object. The convenience is in the handling
 * the unset because if I pass an empty struct to the update it generates an empty object anyway in the db. Handling the unset eliminates
 * the issue and delete an existing value without creating an empty struct..
 */
func GetUpdateDocument(obj *{{.Collection.Schema.Properties.StructName}}) UpdateDocument {
  ud := UpdateDocument{}

{{- range $a := .Collection.DirectAttributes}}
{{- $f := $a.GetDefinition }}
{{- range $i, $p := $a.GetPaths "omitIndexed" }}
{{- if $a.HasOption "cust-upd-handling" }}
/* Custom Update Handling Option: cust-upd-handling
{{- end}}
{{- if $f.IsCollectionType }}
if len(obj.{{$a.GetGoAttributeName}}) > 0 {
  ud.Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} obj.{{$a.GetGoAttributeName}})
} else {
  ud.Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }})
}
{{- end }}
{{- if $f.IsStructType }}
if !obj.{{$a.GetGoAttributeName}}.IsZero() {
  ud.Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} obj.{{$a.GetGoAttributeName}})
} else {
  ud.Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} )
}
{{- end }}
{{- if $f.IsValueType }}
{{- if eq $f.Typ "string" }}
if obj.{{$a.GetGoAttributeName}} != "" {
   ud.Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} obj.{{$a.GetGoAttributeName}})
} else {
   ud.Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }})
}
{{- end }}
{{- if eq $f.Typ "int" }}
if obj.{{$a.GetGoAttributeName}} != 0 {
   ud.Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} obj.{{$a.GetGoAttributeName}})
} else {
   ud.Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }})
}
{{- end }}
{{- if eq $f.Typ "date" }}
if obj.{{$a.GetGoAttributeName}} != 0 {
   ud.Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} obj.{{$a.GetGoAttributeName}})
} else {
   ud.Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }})
}
{{- end }}
{{- end }}
{{- if $a.HasOption "cust-upd-handling" }}
 */
{{- end}}
{{- end }}
{{- end }}

   return ud
}

{{- range $a := .Collection.Attributes}}
{{ $f := $a.GetDefinition }}
{{- if eq $a.GetDefinition.Typ "string" }}
{{ template "update-string" filterSubTemplateContext $a "*" }}
{{- else if eq $a.GetDefinition.Typ "int" }}
{{ template "update-int" filterSubTemplateContext $a "*" }}
{{- else if eq $a.GetDefinition.Typ "date" }}
{{ template "update-date" filterSubTemplateContext $a "*" }}
{{- else }}
{{ $f := $a.GetDefinition }}
// {{$f}} {{$f.Paths}}
{{- range $i, $p := $a.GetPaths "preferIndexed" }}
func (ud *UpdateDocument) Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} p {{$a.GetGoAttributeType}}) *UpdateDocument {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	ud.Set().Add(func() bson.E {
    		return bson.E{ Key: mName, Value: p}
    })
	return ud
}

func (ud *UpdateDocument) Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "none" }}) *UpdateDocument {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	ud.Unset().Add(func() bson.E {
    		return bson.E{ Key: mName, Value: ""}
    })
	return ud
}
{{- end }}
{{- end -}}

{{- if or (eq $a.GetDefinition.Typ "array") (eq $a.GetDefinition.Typ "map") -}}
{{ $f := $a.Item.GetDefinition }}
// {{$f}} {{$f.Paths}}
{{- range $i, $p := $a.Item.GetPaths "preferIndexed"}}
func (ud *UpdateDocument) Set{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "after" }} p {{$a.Item.GetGoAttributeType}}) *UpdateDocument {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	ud.Set().Add(func() bson.E {
    		return bson.E{ Key: mName, Value: p}
    })
	return ud
}

func (ud *UpdateDocument) Unset{{ updateMethodSignature $p }} ({{ updateMethodVarParams $p true "none" }}) *UpdateDocument {
	mName := fmt.Sprintf({{ formatIdentifier $p "_" "upperCase" "index" "indexIjk"}} {{ updateMethodVarParams $p false "before" }})
	ud.Unset().Add(func() bson.E {
    		return bson.E{ Key: mName, Value: ""}
    })
	return ud
}
{{- end }}
{{- end }}
{{- end }}

