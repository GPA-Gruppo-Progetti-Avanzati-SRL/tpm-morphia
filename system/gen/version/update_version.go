package version

import (
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-morphia/system"
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-morphia/system/util"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// generated using files from resources directory
// DO NOT COMMIT this file
package system

func init(){
    SysInfo = Info { TPMMorphia: "{{ .TPMMorphia }}", BuildNum: "{{ .BuildNum }}",  GitSHA: "{{ .GitSHA }}", GOOS: "{{ .GOOS }}", GOARCH: "{{ .GOARCH }}" }
}
`))

func UpdateVersionInfo(versionFilename string, resourceDirectory string, versionGoFile string, versionTxtTemplate string, outVersionTxtFileName string) {

	versionFileContent, err := util.ReadTextLines(versionFilename, 1)
	if err != nil || len(versionFileContent) < 1 {
		log.Fatal("Error Reading Version File: ", err)
	}

	versionNumber := strings.TrimSpace(versionFileContent[0])
	log.Println("Current Version Number: " + versionNumber)

	buildNumber := os.Getenv(system.DefaultTpmMorphiaBuildNum_EnvVar)
	if buildNumber == "" {
		buildNumber = "UNDEF"
	}

	gitSHA := os.Getenv(system.DefaultTpmMorphiaGitSHA_EnvVar)
	if gitSHA == "" {
		gitSHA = "UNDEF"
	}

	sourceFileName := versionTxtTemplate
	destinationFile := filepath.Join(resourceDirectory, outVersionTxtFileName)

	vInfo := &system.Info{TPMMorphia: versionNumber, BuildNum: buildNumber, GitSHA: gitSHA, GOOS: runtime.GOOS, GOARCH: runtime.GOARCH}
	log.Printf("Generating Go Source to %s", versionGoFile)
	if err := util.ProcessTemplateWrite2File(packageTemplate, vInfo, versionGoFile, true); err != nil {
		log.Fatal("Error Generating Go Source: ", err)
	}

	log.Printf("Generating text trom template %s to %s", sourceFileName, destinationFile)
	if err := util.LoadTemplateProcessWrite2File(versionTxtTemplate, vInfo, destinationFile, false); err != nil {
		log.Fatal("Error Generating Text Source: ", err)
	}
}

/*
func generateGoOutputFile(outputFile string, pkgTemplate *template.Template, templateData interface{})  {

	builder := &bytes.Buffer{}

	err = pkgTemplate.Execute(builder, templateData)
	if err != nil {
		log.Fatal("Error executing template", err)
	}

	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	err = ioutil.WriteFile(outputFile, data, os.ModePerm)
	if err != nil {
		log.Fatal("Error writing outputFile file", err)
	}

}
*/
